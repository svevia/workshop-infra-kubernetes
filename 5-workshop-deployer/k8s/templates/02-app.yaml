{{- if .Values.secret.create }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.secret.name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
type: Opaque
stringData:
  apiKey: {{ required "secret.apiKey is required" .Values.secret.apiKey | quote }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-api" .Release.Name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- with .Values.podLabels }}{{ toYaml . | nindent 8 }}{{- end }}
      annotations:
        {{- with .Values.podAnnotations }}{{ toYaml . | nindent 8 }}{{- end }}
    spec:
      serviceAccountName: {{ default (printf "%s-sa" .Release.Name) .Values.serviceAccount.name }}
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: git-clone
          image: alpine/git:latest
          command:
            - git
            - clone
            - -b
            - workshop-setup-test
            - https://github.com/svevia/cargo-cats.git
            - /shared/cargo-cats
          volumeMounts:
            - name: shared-data
              mountPath: /shared
      volumes:
        - name: shared-data
          emptyDir: {}
      containers:
        - name: api
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: apiKey
            - name: WORKDIR
              value: {{ .Values.env.workdir | quote }}
            - name: NS_PREFIX
              value: {{ .Values.env.nsPrefix | quote }}
            - name: CLUSTER_NAME
              value: {{ .Values.env.clusterName | default "workshop-cluster" | quote }}
            - name: AWS_REGION
              value: {{ .Values.env.awsRegion | default "eu-west-1" | quote }}
            - name: AWS_DEFAULT_REGION
              value: {{ .Values.env.awsRegion | default "eu-west-1" | quote }}
          ports:
            - containerPort: {{ .Values.service.targetPort }}
          volumeMounts:
            - name: shared-data
              mountPath: /cargo-cats
              subPath: cargo-cats
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ printf "%s-api" .Release.Name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  type: {{ .Values.service.type }}
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
      protocol: TCP
      name: http
---
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ printf "%s-api" .Release.Name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  rules:
    - host: {{ .Values.ingress.host | quote }}
      http:
        paths:
          - path: {{ .Values.ingress.path | quote }}
            pathType: {{ .Values.ingress.pathType }}
            backend:
              service:
                name: {{ printf "%s-api" .Release.Name }}
                port:
                  number: {{ .Values.service.port }}
{{- end }}
